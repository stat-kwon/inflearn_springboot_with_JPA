< 엔티티 설계시 주의해야 할 점 >

Q. Entity에 Setter를 붙이는 것이 옳은가요?

> 이론적으로 Getter, Setter 모두 제공하지 않고, 꼭 필요한 별도의 메서드를 제공하는게 가장 이상적
이다. 하지만 실무에서 엔티티의 데이터는 조회할 일이 너무 많으므로, Getter의 경우 모두 열어두는 것이
편리하다. Getter는 아무리 호출해도 호출 하는 것 만으로 어떤 일이 발생하지는 않는다. 하지만 Setter는
문제가 다르다. Setter를 호출하면 데이터가 변한다. Setter를 막 열어두면 가까운 미래에 엔티티에가 도대
체 왜 변경되는지 추적하기 점점 힘들어진다.
그래서 엔티티를 변경할 때는 Setter 대신에 변경 지점이 명확하도록 변경을 위한 비즈니스 메서드를 별도로 제공해야 한다. (추가로 알아봐야 함)
+ Setter가 모두 열려 있다. => 변경 포인트가 너무 많아서, 유지보수가 어렵다.

Q. id의 @Column(name="{name}_id") 로 하는 이유가 있을가요?

> 엔티티의 식별자는 id 를 사용하고 PK 컬럼명은 member_id 를 사용했다. 엔티티는 타입(여기서는
Member )이 있으므로 id 필드만으로 쉽게 구분할 수 있다. 테이블은 타입이 없으므로 구분이 어렵다. 그리
고 테이블은 관례상 테이블명 + id 를 많이 사용한다. 참고로 객체에서 id 대신에 memberId 를 사용해도
된다. 중요한 것은 일관성이다.


Q. @ManyToMany 배우긴 했는데 실무에서 안쓰는 이유를 더 알고 싶어요. N+1뿐만 아니라 다른 이유?

> @ManyToMany 는 편리한 것 같지만, 중간 테이블( CATEGORY_ITEM )에 컬럼을 추가할 수 없고, 세밀하게 쿼
리를 실행하기 어렵기 때문에 실무에서 사용하기에는 한계가 있다. 중간 엔티티( CategoryItem 를 만들고
@ManyToOne , @OneToMany 로 매핑해서 사용하자. 정리하면 대다대 매핑을 일대다, 다대일 매핑으로 풀어
내서 사용하자. (보충 : 앞선 예제에서 Category_item table의 경우 등록일 수정과 같은 기본 컬럼 조차 추가할 수 없음)


Q. Adress와 같은 값 타입에 더 신경쓰는 이유가 있을가요?

>  값 타입은 변경 불가능(Immutable)하게 설계해야 한다.
  > @Setter 를 제거하고, 생성자에서 값을 모두 초기화해서 변경 불가능한 클래스를 만들자. JPA 스펙상 엔티
  티나 임베디드 타입( @Embeddable )은 자바 기본 생성자(default constructor)를 public 또는
  protected 로 설정해야 한다. public 으로 두는 것 보다는 protected 로 설정하는 것이 그나마 더 안전
  하다. JPA가 이런 제약을 두는 이유는 JPA 구현 라이브러리가 객체를 생성할 때 리플랙션 같은 기술을 사용할 수있도록
  지원해야 하기 때문이다. ( Adress.java에 써놓은 내용도 같이 읽어볼 것 )


Q. 모든 연관관계는 지연로딩(Lazy)으로 설정해야되나요?

> 해야됩니다. 여러분들 이거 엄청 중요합니다.라고 하심 외우는 수준으로 써야한다고 까지 말씀 하심
즉시로딩( EAGER ) : 예를 들면 Order를 조회하는 시점에 Order와 연관관계를 가지는
                   다른 Table(Member, OrderItem, Delivery 등등)도 모두 로딩하겠다는 의미
                   그런데 즉시로딩(EAGER)는 예측이 어렵고, 어떤 SQL이 실행될지 추적하기 어렵다.
                   특히, JPQL을 실행할 때 N+1 문제가 자주 발생한다.
                   EAGER는 절대로 쓰면안된다. 실무에서 고쳐달라고 연락받고 간곳도 LAZY로 다 바꾸고 고쳐나가는 과정을 함.
                   따라서 LAZY로 설정하고 나서 연관된 엔티티를 함께 DB에서 조회해야 하면, fetch join 또는 엔티티 그래프 기능을 사용함.

                   N+1 문제도 이 개념에서 나온 문제로 간단히 설명하면 다음과 같음
                    @ManyToOne(fetch = FetchType.EAGER)로 설정되 있는 경우 (물론 default가 EAGER임)
                   1) em.find()로 한 건 조회할 때 => EAGER여도 쿼리 한번만 날려서 상관없음
                   2) JPQL(JPA가 제공하는 쿼리 ex) select * from order) => SQL로 그래로 번역이 됨(EAGER 무시)
                      =>(Order 100번 조회하는 상황이라고 가정) SQL 날라갈때는 Order만 100개 가져오는건 맞음 근데 Member가 Eager로
                      되있어서 단방 쿼리도 100개 날라가게 됨 이것이 n+1 문제 order날리는 쿼리 1개 + 단순쿼리 100개

                    실무에서도 대부분 이걸로 밤새면서 고생하는데 고치러 가보면 위와같은 EAGER 문제임


                    따라서 다음과 같이 한다.
                    1. 모든 연관관계는 지연로딩( LAZY )으로 설정해야 한다.
                    2. 연관된 엔티티를 함께 DB에서 조회해야 하면, fetch join 또는 엔티티 그래프 기능을 사용한다.
                    3. @XToOne(OneToOne, ManyToOne) 관계는 기본이 즉시로딩이므로 직접 지연로딩으로 설정해야 한다.
                       (강사님은 Table 전부 세팅하고 마지막에 ctrl+shift+f 이용해서 ManyToOne, OneToOne 다 바꿔줬음)


Q. 컬렉션 필드 초기화 어떤 방법이 나을가요?

> 컬렉션은 필드에서 초기화 하자. 생성자 ㄴㄴ
그 이유는 컬렉션은 필드에서 바로 초기화 하는 것이 안전하다 null 문제에서 안전하다.
또한 더 큰 이유는 아래와 같음
하이버네이트는 엔티티를 영속화 할 때, 컬랙션을 감싸서 하이버네이트가 제공하는 내장 컬렉션으로 변경한다.
만약 getOrders() 처럼 임의의 메서드에서 컬력션을 잘못 생성하면 하이버네이트 내부 메커니즘에 문
제가 발생할 수 있다. 따라서 필드레벨에서 생성하는 것이 가장 안전하고, 코드도 간결하다.

결론: 컬렉션은 바꾸지마세요! private List<Order> orders = new ArrayList<>(); 이거 건들지 마세요!!
     (하이버네이트가 원하는 매커니즘으로 동작하지 못함)


Q. 실행창 log에 찍히는 SQL의 변수명이 조금씩 달라요. 왜 그러죠?

스프링 부트 신규 설정 (엔티티(필드) 테이블(컬럼))
1. 카멜 케이스 -> 언더스코어(memberPoint member_point)
2. .(점) -> _(언더스코어)
3. 대문자 -> 소문자

private LocalDateTime orderState => order_state로 실행창에 뜸
그이유는 스프링 부트에서 하이버네이트 기본 매핑 전략을 변경해서 실제 테이블 필드명은 다르게 됨(Default로 내장되어 있음, JPA가 DBA분들 배려한 것)


Q. cascade 이거 설정만 하면 더이상 없죠??..
넹
EX) Order테이블을 가보면 여기부분에 cascade를 설정해줘야 한다.
    @OneToMany(mappedBy = "order", cascade = CascadeType.ALL)
    private List<OrderItem> orderItems = new ArrayList<>();

    원래는 Order를 저장하고 이후에 OrderItem을 쭉쭉쭉 저장한다. 무슨말이냐면 아래 코드를 보면
    원래 이렇게 4개가 수행되는데
    persist(orderItemA)
    persist(orderItemB)
    persist(orderItemC)
    persist(order)

    cascadeType.ALL을 설정하면 아래 코드 하나만 해도 위와 같은 효과가 있다.
    persist(order)

    동시에 같이 수행하는 효과가 있음

    Cascade를 넣어야 하는 경우?는 설명이 없었고 저렇게 persist가 많이 필요한 구간을 알아야됨 => JPA 전반적인 흐름을 이해할때 적절히 쓸 수 있음.
    그래서 일단 쓴곳은 두 곳

Q. 양방향할때 편의 메서드를 신경써야 된다는게 머죠?
    이해가 힘들어서 말해준거 그대로 적음...
    양방향 연관관계 세팅할때 (Member class, order class 보면서 읽을 것)
    멤버가 order를 하면 List<Order>에 넣어줘야 함 (양방향이라 객체를 양쪽에 다 넣어줘야 함, 연관관계 주인이고 머고 다떠나서)
    member.getOrder()든 order.getMember()든 무엇이든 쓸 수 있음 양방향이니, 따라서 양쪽에다 값을 세팅해주는게 가장 좋음
    물론 디비에 저장하는 건 @JoinColumn(name="member_id")부분 왜냐 연관관계 주인이니까 로직을 세울때 왓다갓다할려면 있어야 한다고!!

    그러고나서 연관관계 메서드 추가하기 시작하심

    요약: 주종관계로 DB 접근하는게 불편한데 이를 해결하기 위해 편의 메서드를 작성하는 것이 도움이 많이 됨
         작성 위치는 양방향인 곳에서 주인쪽에 작성할 것
